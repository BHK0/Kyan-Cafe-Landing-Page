This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-04T08:10:08.743Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
.eslintrc.json
.gitignore
app/api/prefetch-images/[...path]/route.js
app/components/Features.js
app/components/Footer.js
app/components/Hero.js
app/components/Icons.js
app/components/Link.js
app/components/Locations.js
app/components/Map.js
app/components/MapSkeleton.js
app/components/Menu.js
app/components/MenuCard.js
app/components/SocialMedia.js
app/components/ThemeToggle.js
app/context/ThemeContext.js
app/globals.css
app/layout.js
app/menu/page.jsx
app/page.jsx
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.js
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="app/api/prefetch-images/[...path]/route.js">
import { NextResponse } from 'next/server';

export const dynamic = 'force-static';

export async function GET(request) {
  try {
    // Get the requested path from the URL and clean it
    const pathname = new URL(request.url).pathname;
    const path = pathname.replace('/api/prefetch-images', '').split('#')[0];

    // Skip empty paths
    if (!path || path === '/') {
      return NextResponse.json({ images: [] });
    }

    // Current implementation with static images
    let images = [];
    
    // Basic path-based image mapping
    if (path === '/menu') {
      images = [
        {
          srcset: '/coffe-cub-kyan.webp',
          sizes: '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
          src: '/coffe-cub-kyan.webp',
          alt: 'Coffee Cup',
          loading: 'eager'
        }
      ];
    }

    return NextResponse.json(
      { images },
      {
        headers: {
          'Cache-Control': 'public, max-age=3600',
          'Content-Type': 'application/json',
        },
      }
    );
  } catch (error) {
    console.error('Error prefetching images:', error);
    return NextResponse.json(
      { images: [] },
      { status: 200 }
    );
  }
}
</file>

<file path="app/components/Features.js">
'use client';

import { motion } from 'framer-motion';
import { Coffee, CupSoda, Apple, Cake } from 'lucide-react';

const features = [
  {
    icon: Coffee,
    title: "Coffee",
    description: "We care about the details and select the best types of coffee beans to serve the best coffee"
  },
  {
    icon: CupSoda,
    title: "Refreshing Drinks",
    description: "Innovative carbonated drinks with distinctive flavors"
  },
  {
    icon: Apple,
    title: "Juice Blends",
    description: "Natural fruits are always a healthy choice, that's why they are included in Kyan's menu"
  },
  {
    icon: Cake,
    title: "Desserts",
    description: "We have multiple options of prepared desserts and ready-made items in the refrigerator"
  }
];

export default function Features() {
  return (
    <section className="py-8 md:py-16 bg-gradient-to-b from-white to-gray-50 dark:from-gray-800 dark:to-gray-900">
      <div className="container mx-auto px-3 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6">
          {features.map((feature, index) => {
            const Icon = feature.icon;
            return (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.2 }}
                className="p-4 md:p-6 rounded-xl
                          bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm
                          border border-gray-100 dark:border-gray-700
                          shadow-none dark:shadow-gray-900/30"
              >
                <div className="flex flex-col items-center text-center space-y-2 md:space-y-3">
                  <div className="relative">
                    <div className="absolute inset-0 bg-cyan-400/20 dark:bg-cyan-600/20 rounded-full blur-lg" />
                    <div className="relative p-2 md:p-3 rounded-full bg-gradient-to-br from-cyan-50 to-white 
                                  dark:from-gray-800 dark:to-gray-700">
                      <Icon className="w-6 h-6 md:w-7 md:h-7 text-cyan-600 dark:text-cyan-400" 
                           strokeWidth={1.5} />
                    </div>
                  </div>
                  <h3 className="text-base md:text-lg font-bold text-gray-900 dark:text-white">
                    {feature.title}
                  </h3>
                  <p className="text-xs md:text-sm text-gray-600 dark:text-gray-300 leading-relaxed">
                    {feature.description}
                  </p>
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="app/components/Footer.js">
'use client';

import { motion } from 'framer-motion';
import { LocationIcon } from './Icons';

export default function Footer() {
  return (
    <footer className="bg-gray-950 text-white py-16">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {/* Franchise Information */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="space-y-4"
          >
            <h3 className="text-xl font-bold text-[#00BED6] mb-4">Franchise Requests</h3>
            <div>
              <p className="font-semibold mb-2">Within KSA and GCC Countries</p>
              <p className="text-gray-300">0501436577</p>
            </div>
            <div>
              <p className="font-semibold mb-2">Rest of the World</p>
              <p className="text-gray-300">971562033553+</p>
            </div>
          </motion.div>

          {/* Working Hours */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.1 }}
            className="space-y-4"
          >
            <h3 className="text-xl font-bold text-[#00BED6] mb-4">Working Hours</h3>
            <div>
              <p className="font-semibold mb-2">Kyan Branches</p>
              <p className="text-gray-300">24 hours all week</p>
            </div>
            <div>
              <p className="font-semibold mb-2">Management Office Qassim - Unaizah</p>
              <p className="text-gray-300">Sunday to Thursday</p>
              <p className="text-gray-300">9 AM to 5 PM</p>
              <p className="text-gray-300">Saturday 12 PM to 5 PM</p>
              <a
                href="https://maps.app.goo.gl/Sh18p5Pm6HRnzbXq7"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 mt-2 text-[#00BED6] hover:text-[#00a8bd] transition-colors"
              >
                <LocationIcon />
                <span>Management Location</span>
              </a>
            </div>
          </motion.div>

          {/* Company Details */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
            className="space-y-4"
          >
            <h3 className="text-xl font-bold text-[#00BED6] mb-4">Kyan Power Trading Company</h3>
            <div className="space-y-2 text-gray-300">
              <p>Registration Number: 1128183956</p>
              <p>Tax Number: 310874375800003</p>
              <p>Address: Unaizah - City Center - King Abdulaziz</p>
              <p>Postal Code: 56219</p>
            </div>
          </motion.div>

          {/* Contact Information */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.3 }}
            className="space-y-4"
          >
            <h3 className="text-xl font-bold text-[#00BED6] mb-4">Contact Us</h3>
            <div className="space-y-4">
              <div>
                <p className="font-semibold mb-1">Complaints or Suggestions</p>
                <p className="text-gray-300">920011100</p>
              </div>
              <div>
                <p className="font-semibold mb-1">Customer Service</p>
                <p className="text-gray-300">cs@kyancafe.com</p>
              </div>
            </div>
          </motion.div>
        </div>

        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          className="dir-rtl mt-12 pt-8 border-t border-gray-800 text-center text-gray-400"
        >
          <p>© {new Date().getFullYear()} Kyan Cafe. All Rights Reserved</p>
        </motion.div>
      </div>
    </footer>
  );
}
</file>

<file path="app/components/Hero.js">
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';

export default function Hero() {
  return (
    <section className="relative h-[100svh] flex items-center justify-center overflow-hidden 
                      bg-gray-900">
      <div className="container mx-auto px-4 z-10 h-[100svh] md:h-auto 
                      flex items-center">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
          className="text-center w-full safe-area-inset-padding"
        >
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="mb-6 md:mb-8 flex justify-center"
          >
            <div className="w-[120px] h-[120px] md:w-[200px] md:h-[200px] relative">
              <Image
                src="/logo.png"
                fill
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                alt="Kyan Logo"
                className="animate-float object-contain"
                priority
              />
            </div>
          </motion.div>

          <div className="max-h-[60vh] md:max-h-none overflow-hidden">
            <h1 className="text-2xl md:text-6xl lg:text-7xl font-bold mb-4 md:mb-6 text-white">
              The Right Destination to Create
              <span className="text-[#00BED6] block mt-2 md:mt-8">The Perfect Experience</span>
            </h1>
            
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="text-base md:text-xl text-gray-300 mb-6 md:mb-8 max-w-2xl mx-auto"
            >
              We offer you a unique coffee experience with a diverse selection of distinctive beverages
            </motion.p>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6 }}
              className="flex flex-col md:flex-row items-center justify-center gap-3 md:gap-4 
                        px-4 pb-safe"
            >
              <motion.a
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                href="#menu"
                onClick={(e) => {
                  e.preventDefault();
                  document.querySelector('#menu')?.scrollIntoView({ behavior: 'smooth' });
                }}
                className="w-full md:w-auto bg-[#00BED6] text-white px-6 py-3 md:py-4 rounded-lg 
                         text-lg md:text-xl font-bold transition-all hover:bg-[#00a8bd]"
              >
                View Menu
              </motion.a>
              <motion.a
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                href="#locations"
                onClick={(e) => {
                  e.preventDefault();
                  document.querySelector('#locations')?.scrollIntoView({ behavior: 'smooth' });
                }}
                className="w-full md:w-auto border-2 border-[#00BED6] text-[#00BED6] 
                         dark:text-white px-6 py-3 md:py-4 rounded-lg text-lg md:text-xl font-bold 
                         transition-all hover:bg-[#00BED6] hover:text-white"
              >
                Our Locations
              </motion.a>
            </motion.div>
          </div>
        </motion.div>
      </div>
      
      <div className="absolute inset-0 z-0">
        <Image
          src="/hero.webp"
          alt="Coffee background"
          fill
          className="object-cover opacity-20"
          priority
        />
      </div>

      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
        <svg 
          className="w-5 h-5 md:w-6 md:h-6 text-gray-400 dark:text-gray-500" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M19 14l-7 7m0 0l-7-7m7 7V3" 
          />
        </svg>
      </div>
    </section>
  );
}
</file>

<file path="app/components/Icons.js">
export const CoffeeIcon = () => (
  <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M17 11.5V14.5M17 11.5H19C20.1046 11.5 21 12.3954 21 13.5V14.5C21 15.6046 20.1046 16.5 19 16.5H17M17 11.5H7M17 14.5H7M7 11.5H5C3.89543 11.5 3 12.3954 3 13.5V14.5C3 15.6046 3.89543 16.5 5 16.5H7M7 11.5V14.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M12 8.5V3.5M12 3.5L10 5.5M12 3.5L14 5.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M8 16.5V19.5C8 20.0523 8.44772 20.5 9 20.5H15C15.5523 20.5 16 20.0523 16 19.5V16.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export const DrinkIcon = () => (
  <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M5.5 8.5L6.5 18.5C6.5 19.6046 7.39543 20.5 8.5 20.5H15.5C16.6046 20.5 17.5 19.6046 17.5 18.5L18.5 8.5H5.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M15 13.5V15.5M9 13.5V15.5M12 13.5V15.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M4 8.5H20L19.5 5.5C19.5 4.39543 18.6046 3.5 17.5 3.5H6.5C5.39543 3.5 4.5 4.39543 4.5 5.5L4 8.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export const JuiceIcon = () => (
  <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.5 14.5C7.5 11.4624 9.96243 9 13 9C16.0376 9 18.5 11.4624 18.5 14.5V19.5C18.5 20.0523 18.0523 20.5 17.5 20.5H8.5C7.94772 20.5 7.5 20.0523 7.5 19.5V14.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M13 9V3.5M13 3.5L11 5.5M13 3.5L15 5.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export const DessertIcon = () => (
  <svg className="w-12 h-12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M19 11.5H5C4.44772 11.5 4 11.9477 4 12.5V13.5C4 17.366 7.13401 20.5 11 20.5H13C16.866 20.5 20 17.366 20 13.5V12.5C20 11.9477 19.5523 11.5 19 11.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M7.5 11.5V10.5C7.5 7.46243 9.96243 5 13 5C16.0376 5 18.5 7.46243 18.5 10.5V11.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export const LocationIcon = () => (
  <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    <path d="M12 21C16 17 20 13.4183 20 10C20 6.13401 16.4183 3 12 3C7.58172 3 4 6.13401 4 10C4 13.4183 8 17 12 21Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

export function CheckCircle({ className }) {
  return (
    <svg 
      className={className} 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor" 
      strokeWidth="2"
    >
      <path 
        strokeLinecap="round" 
        strokeLinejoin="round" 
        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" 
      />
    </svg>
  );
}
</file>

<file path="app/components/Link.js">
'use client';

import NextLink from 'next/link';
import { useRouter } from 'next/navigation';
import { useEffect, useRef, useState } from 'react';

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function prefetchImages(href) {
  if (href.startsWith('/order')) {
    return [];
  }

  try {
    const cleanHref = href.split('#')[0];

    if (cleanHref === '/') {
      return [{
        srcset: '/hero.webp',
        sizes: '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
        src: '/hero.webp',
        alt: 'Hero Image',
        loading: 'eager'
      }];
    }

    const url = new URL(cleanHref, window.location.href);
    const imageResponse = await fetch(`/api/prefetch-images${url.pathname}`, {
      priority: 'low',
    });
  
    if (!imageResponse.ok) {
      if (process.env.NODE_ENV === 'development') {
        console.warn(`Failed to prefetch images for ${href}`);
      }
      return [];
    }
    
    const { images } = await imageResponse.json();
    return images;
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.warn(`Error prefetching images for ${href}:`, error);
    }
    return [];
  }
}

const seen = new Set();

function prefetchImage(image) {
  if (image.loading === 'lazy' || seen.has(image.srcset)) {
    return;
  }
  const img = new Image();
  img.decoding = 'async';
  img.fetchPriority = 'low';
  img.sizes = image.sizes;
  seen.add(image.srcset);
  img.srcset = image.srcset;
  img.src = image.src;
  img.alt = image.alt;
  let done = false;
  img.onload = img.onerror = () => {
    done = true;
  };
  return () => {
    if (done) return;
    img.src = img.srcset = '';
    seen.delete(image.srcset);
  };
}

export function Link({ children, ...props }) {
  const [images, setImages] = useState([]);
  const [preloading, setPreloading] = useState([]);
  const linkRef = useRef(null);
  const router = useRouter();
  let prefetchTimeout = null;
  /* eslint-disable react-hooks/exhaustive-deps */
  useEffect(() => {
    if (props.prefetch === false) {
      return;
    }

    const linkElement = linkRef.current;
    if (!linkElement) return;
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          prefetchTimeout = setTimeout(async () => {
            router.prefetch(String(props.href));
            await sleep(0);
            void prefetchImages(String(props.href)).then((images) => {
              setImages(images);
            }, console.error);
            observer.unobserve(entry.target);
          }, 300);
        } else if (prefetchTimeout) {
          clearTimeout(prefetchTimeout);
          prefetchTimeout = null;
        }
      },
      { rootMargin: '0px', threshold: 0.1 }
    );

    observer.observe(linkElement);

    return () => {
      observer.disconnect();
      if (prefetchTimeout) {
        clearTimeout(prefetchTimeout);
      }
    };
  }, [props.href, props.prefetch]);

  return (
    <NextLink
      ref={linkRef}
      prefetch={false}
      onMouseEnter={() => {
        router.prefetch(String(props.href));
        if (preloading.length) return;
        const p = [];
        for (const image of images) {
          const remove = prefetchImage(image);
          if (remove) p.push(remove);
        }
        setPreloading(p);
      }}
      onMouseLeave={() => {
        for (const remove of preloading) {
          remove();
        }
        setPreloading([]);
      }}
      onMouseDown={(e) => {
        const url = new URL(String(props.href), window.location.href);
        if (
          url.origin === window.location.origin &&
          e.button === 0 &&
          !e.altKey &&
          !e.ctrlKey &&
          !e.metaKey &&
          !e.shiftKey
        ) {
          e.preventDefault();
          router.push(String(props.href));
        }
      }}
      {...props}
    >
      {children}
    </NextLink>
  );
}
</file>

<file path="app/components/Locations.js">
'use client';

import { motion } from 'framer-motion';
import { useEffect, useState, Suspense } from 'react';
import { LocationIcon } from './Icons';
import { useLoadScript } from '@react-google-maps/api';
import { useTheme } from '../context/ThemeContext';
import MapSkeleton from './MapSkeleton';
import dynamic from 'next/dynamic';

// Dynamically import the Map component
const Map = dynamic(() => import('./Map'), {
  loading: () => <MapSkeleton />,
  ssr: false
});

const locations = [
  {
    name: "Kyan Cafe - Unaizah",
    address: "Unaizah - City Center - King Abdulaziz",
    coordinates: { lat: 26.0760677, lng: 43.9595921 },
    phone: "920011100"
  },
  {
    name: "Kyan Cafe - Riyadh", 
    address: "Riyadh - Al Malqa District",
    coordinates: { lat: 24.7136, lng: 46.6753 },
    phone: "920011100"
  }
];

const mapContainerStyle = {
  width: '100%',
  height: '400px',
  borderRadius: '1rem'
};

const center = {
  lat: 26.0760677,
  lng: 43.9595921
};

// Add dark mode styles for the map
const mapStyles = {
  light: [
    {
      featureType: "all",
      elementType: "labels.text.fill",
      stylers: [{ color: "#171717" }]
    },
    {
      featureType: "water",
      elementType: "geometry",
      stylers: [{ color: "#00BED6" }]
    }
  ],
  dark: [
    { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
    { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
    { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
    {
      featureType: "administrative.locality",
      elementType: "labels.text.fill",
      stylers: [{ color: "#d59563" }]
    },
    {
      featureType: "poi",
      elementType: "labels.text.fill",
      stylers: [{ color: "#d59563" }]
    },
    {
      featureType: "poi.park",
      elementType: "geometry",
      stylers: [{ color: "#263c3f" }]
    },
    {
      featureType: "poi.park",
      elementType: "labels.text.fill",
      stylers: [{ color: "#6b9a76" }]
    },
    {
      featureType: "road",
      elementType: "geometry",
      stylers: [{ color: "#38414e" }]
    },
    {
      featureType: "road",
      elementType: "geometry.stroke",
      stylers: [{ color: "#212a37" }]
    },
    {
      featureType: "road",
      elementType: "labels.text.fill",
      stylers: [{ color: "#9ca5b3" }]
    },
    {
      featureType: "road.highway",
      elementType: "geometry",
      stylers: [{ color: "#746855" }]
    },
    {
      featureType: "road.highway",
      elementType: "geometry.stroke",
      stylers: [{ color: "#1f2835" }]
    },
    {
      featureType: "road.highway",
      elementType: "labels.text.fill",
      stylers: [{ color: "#f3d19c" }]
    },
    {
      featureType: "water",
      elementType: "geometry",
      stylers: [{ color: "#00BED6" }]
    },
    {
      featureType: "water",
      elementType: "labels.text.fill",
      stylers: [{ color: "#515c6d" }]
    },
    {
      featureType: "water",
      elementType: "labels.text.stroke",
      stylers: [{ color: "#17263c" }]
    }
  ]
};

export default function Locations() {
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [showMap, setShowMap] = useState(false);
  const { theme } = useTheme();

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,
    loading: <MapSkeleton />,
  });

  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        setShowMap(true);
        observer.disconnect();
      }
    }, { 
      threshold: 0.1,
      rootMargin: '500px 0px',
      passive: true
    });

    const section = document.getElementById('locations');
    if (section) {
      observer.observe(section);
    }

    const timer = setTimeout(() => {
      if (window.location.hash === '#locations') {
        setShowMap(true);
      }
    }, 100);

    return () => {
      observer.disconnect();
      clearTimeout(timer);
    };
  }, []);

  const handleFindNearest = () => {
    const searchQuery = encodeURIComponent('Kyan Cafe');
    window.open(`https://www.google.com/maps/search/${searchQuery}/,13z`, '_blank');
  };

  return (
    <section id="locations" className="py-20 bg-white dark:bg-gray-900">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold mb-4 text-gray-900 dark:text-white">Our Branches</h2>
          <p className="text-gray-600 dark:text-gray-300">We are present in different regions of the Kingdom to be close to you</p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          <div className="lg:col-span-1">
            <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-xl h-full">
              <div className="space-y-6">
                {locations.map((location, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    whileInView={{ opacity: 1, x: 0 }}
                    viewport={{ once: true }}
                    transition={{ delay: index * 0.2 }}
                    className={`p-4 rounded-lg cursor-pointer ${
                      selectedLocation === index 
                        ? 'bg-[#00BED6] text-white' 
                        : 'bg-white dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600'
                    }`}
                    onClick={() => setSelectedLocation(index)}
                  >
                    <div className="flex items-start gap-4">
                      <LocationIcon className={selectedLocation === index ? 'text-white' : 'text-gray-600 dark:text-gray-300'} />
                      <div>
                        <h3 className={`font-bold mb-1 ${
                          selectedLocation === index ? 'text-white' : 'text-gray-900 dark:text-white'
                        }`}>{location.name}</h3>
                        <p className={
                          selectedLocation === index 
                            ? 'text-white/90' 
                            : 'text-gray-600 dark:text-gray-300'
                        }>
                          {location.address}
                        </p>
                        <p className={`mt-2 ${
                          selectedLocation === index 
                            ? 'text-white/90' 
                            : 'text-gray-600 dark:text-gray-300'
                        }`}>
                          {location.phone}
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>

              <motion.button
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                onClick={handleFindNearest}
                className="w-full mt-6 bg-[#00BED6] text-white px-6 py-3 rounded-lg font-bold 
                          flex items-center justify-center gap-2 hover:bg-[#00a8bd]"
              >
                <LocationIcon />
                Nearest Branch to Your Location
              </motion.button>
            </div>
          </div>

          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              whileInView={{ opacity: 1, scale: 1 }}
              viewport={{ once: true }}
              className="h-full rounded-xl overflow-hidden shadow-lg"
            >
              <Suspense fallback={<MapSkeleton />}>
                {showMap && isLoaded ? (
                  <Map
                    mapContainerStyle={mapContainerStyle}
                    center={center}
                    locations={locations}
                    selectedLocation={selectedLocation}
                    setSelectedLocation={setSelectedLocation}
                    mapStyles={mapStyles}
                    theme={theme}
                  />
                ) : (
                  <MapSkeleton />
                )}
              </Suspense>
            </motion.div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="app/components/Map.js">
import { GoogleMap, Marker } from '@react-google-maps/api';

export default function Map({ 
  mapContainerStyle, 
  center, 
  locations, 
  selectedLocation, 
  setSelectedLocation,
  mapStyles,
  theme 
}) {
  return (
    <GoogleMap
      mapContainerStyle={mapContainerStyle}
      center={selectedLocation !== null ? locations[selectedLocation].coordinates : center}
      zoom={13}
      options={{
        styles: theme === 'dark' ? mapStyles.dark : mapStyles.light
      }}
    >
      {locations.map((location, index) => (
        <Marker
          key={index}
          position={location.coordinates}
          animation={selectedLocation === index ? window.google.maps.Animation.BOUNCE : null}
          onClick={() => setSelectedLocation(index)}
        />
      ))}
    </GoogleMap>
  );
}
</file>

<file path="app/components/MapSkeleton.js">
export default function MapSkeleton() {
  return (
    <div className="h-full w-full rounded-xl bg-gray-200 dark:bg-gray-800 animate-pulse">
      <div className="h-full w-full flex items-center justify-center">
        <svg 
          className="w-12 h-12 text-gray-300 dark:text-gray-600" 
          fill="none" 
          viewBox="0 0 24 24"
        >
          <path 
            d="M15 10.5C15 12.1569 13.6569 13.5 12 13.5C10.3431 13.5 9 12.1569 9 10.5C9 8.84315 10.3431 7.5 12 7.5C13.6569 7.5 15 8.84315 15 10.5Z" 
            stroke="currentColor" 
            strokeWidth="1.5" 
            strokeLinecap="round" 
            strokeLinejoin="round"
          />
          <path 
            d="M12 21C16 17 20 13.4183 20 10C20 6.13401 16.4183 3 12 3C7.58172 3 4 6.13401 4 10C4 13.4183 8 17 12 21Z" 
            stroke="currentColor" 
            strokeWidth="1.5" 
            strokeLinecap="round" 
            strokeLinejoin="round"
          />
        </svg>
      </div>
    </div>
  );
}
</file>

<file path="app/components/Menu.js">
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';
import { Link } from './Link';
import { IoMdFlame } from "react-icons/io";

const menuItems = [
  {
    name: "Kyan Latte",
    description: "Special coffee with whipped milk",
    price: "18 SAR",
    calories: "120",
    image: "/coffe-cub-kyan.webp",
    tags: ["Best Seller", "Special"]
  },
  {
    name: "Caramel Mocha",
    description: "Rich coffee with chocolate and caramel",
    price: "20 SAR", 
    calories: "180",
    image: "/coffe-cub-kyan.webp"
  },
  {
    name: "Spanish Latte",
    description: "Unique blend of Spanish coffee",
    price: "22 SAR",
    calories: "150",
    image: "/coffe-cub-kyan.webp"
  }
];

export default function Menu() {
  return (
    <section id="menu" className="py-12 md:py-20 bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-8 md:mb-12"
        >
          <Image
            src="/logo.png"
            alt="Kyan Logo"
            width={80}
            height={80}
            className="mx-auto mb-4 md:mb-6"
          />
          <h2 className="text-3xl md:text-4xl font-bold mb-2 md:mb-4 dark:text-white">Special Drinks Menu</h2>
          <p className="text-sm md:text-base text-gray-600 dark:text-gray-400">Discover a variety of unique drinks</p>
        </motion.div>

        <div className="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-8">
          {menuItems.map((item, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.1 }}
              className="group bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-lg 
                       hover:shadow-xl transform hover:-translate-y-1"
            >
              <div className="relative h-32 md:h-64">
                <Image
                  src={item.image}
                  alt={item.name}
                  fill
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  className="object-contain transform scale-90 group-hover:scale-95 transition-transform duration-300"
                />
                <div className="absolute top-1 right-1 md:top-2 md:right-2 flex gap-1 md:gap-2">
                  {item.tags?.map((tag, tagIndex) => (
                    <span
                      key={tagIndex}
                      className="bg-[#00BED6] text-white text-[10px] md:text-sm px-1.5 md:px-2 py-0.5 md:py-1 rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
              <div className="p-3 md:p-6">
                <h3 className="text-sm md:text-xl font-bold mb-1 md:mb-2 dark:text-white">{item.name}</h3>
                <p className="text-xs md:text-base text-gray-600 dark:text-gray-400 mb-2 md:mb-4">{item.description}</p>
                <div className="flex items-center justify-between">
                  <p className="text-[#00BED6] text-sm md:text-base font-bold">{item.price}</p>
                  <div className="flex items-center gap-1 text-xs md:text-sm text-amber-500">
                    <IoMdFlame className="w-4 h-4" />
                    <span>{item.calories} calories</span>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mt-6 md:mt-12"
        >
          <Link
            href="/menu"
            prefetch={true}
            className="inline-block bg-[#00BED6] text-white px-5 md:px-8 py-2 md:py-4 rounded-lg 
                     text-base md:text-xl font-bold hover:bg-[#00a8bd] hover:shadow-lg"
          >
            View Full Menu
          </Link>
        </motion.div>
      </div>
    </section>
  );
}
</file>

<file path="app/components/MenuCard.js">
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';
import { IoMdFlame } from "react-icons/io";

export default function MenuCard({ item, index }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.05 }}
      className="group bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md 
                 hover:shadow-lg"
    >
      <div className="relative h-32 md:h-48">
        <Image
          src={item.image}
          alt={item.name}
          fill
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          className="object-contain transform scale-90 group-hover:scale-95 transition-transform duration-300"
        />
        {item.tags && (
          <div className="absolute top-1 right-1 flex gap-1">
            {item.tags.map((tag, tagIndex) => (
              <span
                key={tagIndex}
                className="bg-[#00BED6] text-white text-[10px] md:text-xs px-1.5 py-0.5 rounded-full"
              >
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>
      <div className="p-3 md:p-4">
        <h3 className="text-sm md:text-lg font-bold mb-1 md:mb-2 dark:text-white">{item.name}</h3>
        <p className="text-xs md:text-sm text-gray-600 dark:text-gray-400 mb-2">{item.description}</p>
        <div className="flex items-center justify-between">
          <p className="text-[#00BED6] text-sm md:text-base font-bold">{item.price}</p>
          <div className="flex items-center gap-1 text-xs md:text-sm text-amber-500">
            <IoMdFlame className="w-4 h-4" />
            <span>{item.calories} cal</span>
          </div>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="app/components/SocialMedia.js">
'use client';

import { motion } from 'framer-motion';
import { FaTiktok, FaSnapchatGhost, FaInstagram, FaTwitter } from 'react-icons/fa';

const socialLinks = [
  {
    name: 'TikTok',
    url: 'https://www.tiktok.com/@kyancafe',
    icon: <FaTiktok className="w-8 h-8" />
  },
  {
    name: 'Snapchat',
    url: 'https://www.snapchat.com/add/kyancafe',
    icon: <FaSnapchatGhost className="w-8 h-8" />
  },
  {
    name: 'Instagram',
    url: 'https://www.instagram.com/kyancafe/',
    icon: <FaInstagram className="w-8 h-8" />
  },
  {
    name: 'X',
    url: 'https://x.com/KYANcafe',
    icon: <FaTwitter className="w-8 h-8" />
  }
];

export default function SocialMedia() {
  return (
    <section className="py-20 bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold mb-4 dark:text-white">Follow Us On Social Media</h2>
          <p className="text-gray-600 dark:text-gray-300">Stay updated with our latest offers and new products</p>
        </motion.div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-3xl mx-auto">
          {socialLinks.map((social, index) => (
            <motion.a
              key={index}
              href={social.url}
              target="_blank"
              rel="noopener noreferrer"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.1 }}
              className="flex flex-col items-center p-6 bg-white dark:bg-gray-800 rounded-xl 
                       shadow-md hover:shadow-xl hover:-translate-y-1 
                       text-gray-600 dark:text-gray-300 hover:text-[#00BED6] dark:hover:text-[#00BED6]"
            >
              {social.icon}
              <span className="mt-3 font-medium">{social.name}</span>
            </motion.a>
          ))}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="app/components/ThemeToggle.js">
'use client';

import { useTheme } from '../context/ThemeContext';
import React, { useEffect, useState } from 'react';

function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // Only show the toggle after mounting to avoid hydration mismatch
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null; // Return null on first render to avoid hydration mismatch
  }

  return (
    <button
      onClick={toggleTheme}
      className="fixed top-4 right-4 z-50 p-2 rounded-full bg-gray-100 dark:bg-gray-800 
                 shadow-lg hover:shadow-xl transition-transform transform hover:scale-95"
      aria-label="Toggle theme"
    >
      {theme === 'light' ? (
        <svg className="w-6 h-6 text-gray-800" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      ) : (
        <svg className="w-6 h-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      )}
    </button>
  );
}

export default React.memo(ThemeToggle);
</file>

<file path="app/context/ThemeContext.js">
'use client';

import { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react';

const ThemeContext = createContext();

export function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('dark');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    const initialTheme = savedTheme || 'dark';
    
    setTheme(initialTheme);
    
    if (initialTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, []);

  const toggleTheme = useCallback(() => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    document.documentElement.classList.toggle('dark');
  }, [theme]);

  const contextValue = useMemo(() => ({ theme, toggleTheme }), [theme, toggleTheme]);

  return (
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
}

export const useTheme = () => useContext(ThemeContext);
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body {
  overflow-x: hidden;
  width: 100%;
  position: relative;
}

:root {
  --background: #ffffff;
  --foreground: #171717;
  --primary: #00BED6;
  --primary-dark: #00D6F0;
  --card-bg: #f9fafb;
  --card-hover: #ffffff;
  --sat: env(safe-area-inset-top);
  --sar: env(safe-area-inset-right);
  --sab: env(safe-area-inset-bottom);
  --sal: env(safe-area-inset-left);
}

[data-theme="dark"] {
  --background: #0a0a0a;
  --foreground: #ededed;
  --card-bg: #1f2937;
  --card-hover: #2d3748;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: var(--font-cairo);
}

.text-balance {
  text-wrap: balance;
}

/* Add smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Custom animations */
@keyframes float {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.safe-area-inset-padding {
  padding-top: var(--sat);
  padding-right: var(--sar);
  padding-bottom: var(--sab);
  padding-left: var(--sal);
}

.pb-safe {
  padding-bottom: max(env(safe-area-inset-bottom), 1rem);
}
</file>

<file path="app/layout.js">
import { Cairo } from 'next/font/google';
import './globals.css';
import localFont from 'next/font/local';
import { ThemeProvider } from './context/ThemeContext';
import ThemeToggle from './components/ThemeToggle';

const cairo = Cairo({ 
  subsets: ['arabic'],
  display: 'swap',
  preload: true,
});

const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  display: 'swap',
  variable: '--font-geist-mono'
});

export const metadata = {
  title: 'كيان | KYAN',
  description: 'استمتع بتجربة قهوة فريدة مع مجموعة متنوعة من المشروبات المميزة في كيان كافيه',
  keywords: ['كيان كافيه', 'قهوة', 'مشروبات', 'كافيهات السعودية', 'قهوة مميزة'],
  authors: [{ name: 'كيان كافيه' }],
  openGraph: {
    title: 'كيان | KYAN',
    description: 'استمتع بتجربة قهوة فريدة مع مجموعة متنوعة من المشروبات المميزة',
    url: 'https://kyancafe.com',
    siteName: 'كيان كافيه',
    locale: 'ar_SA',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'كيان | KYAN',
    description: 'استمتع بتجربة قهوة فريدة مع مجموعة متنوعة من المشروبات المميزة',
  },
  robots: 'index, follow',
};

export default function RootLayout({ children }) {
  return (
    <html suppressHydrationWarning className={geistMono.variable}>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              try {
                let theme = localStorage.getItem('theme');
                if (!theme) {
                  theme = 'dark';
                  localStorage.setItem('theme', theme);
                }
                if (theme === 'dark') {
                  document.documentElement.classList.add('dark');
                }
              } catch (e) {}
            `,
          }}
        />
      </head>
      <body className={cairo.className}>
        <ThemeProvider>
          <ThemeToggle />
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="app/menu/page.jsx">
import Image from 'next/image';
import { Link } from '../components/Link';
import MenuCard from '../components/MenuCard';

const menuItems = Array(12).fill().map((_, i) => ({
  id: `menu-item-${i}`,
  name: ["Kyan Latte", "Caramel Mocha", "Spanish Latte"][i % 3],
  description: [
    "Special coffee with whipped milk",
    "Rich coffee with chocolate and caramel",
    "Unique blend of Spanish coffee"
  ][i % 3],
  price: ["18 SAR", "20 SAR", "22 SAR"][i % 3],
  calories: ["120", "180", "150"][i % 3],
  image: "/coffe-cub-kyan.webp",
  tags: i % 3 === 0 ? ["Best Seller", "Featured"] : undefined
}));

export default function MenuPage() {
  return (
    <main className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="pt-14 md:pt-0">
        <div className="sticky top-14 md:top-0 z-10 bg-gray-50/95 dark:bg-gray-900/95 backdrop-blur-sm">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <Link href="/" className="flex-shrink-0" prefetch={true}>
                <Image
                  src="/logo.png"
                  alt="Kyan Logo"
                  width={50}
                  height={50}
                  className="hover:opacity-90 transition-opacity"
                />
              </Link>
              
              <Link
                href="/#menu"
                prefetch={true}
                className="flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-[#00BED6] transition-colors"
              >
                <span className="text-sm font-medium">Return to Homepage</span>
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </Link>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 py-6">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2 dark:text-white">Drinks Menu</h1>
            <p className="text-sm text-gray-600 dark:text-gray-400">Enjoy a variety of special drinks</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 md:gap-6">
            {menuItems.map((item) => (
              <MenuCard key={item.id} item={item} />
            ))}
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="app/page.jsx">
import Hero from './components/Hero';
import Features from './components/Features';
import Menu from './components/Menu';
import Locations from './components/Locations';
import SocialMedia from './components/SocialMedia';
import Footer from './components/Footer';

export default function Home() {
  return (
    <main className="min-h-screen">
      <Hero />
      <Features />
      <Menu />
      <Locations />
      <SocialMedia />
      <Footer />
    </main>
  );
}
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "form_page",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.0.0",
    "@aws-sdk/client-ses": "^3.693.0",
    "@aws-sdk/lib-dynamodb": "^3.0.0",
    "@react-google-maps/api": "^2.20.3",
    "@upstash/ratelimit": "^0.4.3",
    "@upstash/redis": "^1.20.6",
    "date-fns": "^4.1.0",
    "framer-motion": "^10.16.4",
    "lucide-react": "^0.460.0",
    "next": "14.2.18",
    "react": "^18",
    "react-dom": "^18",
    "react-icons": "^5.3.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.2.18",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# Kyan Cafe Next.js 14.2.18 Project

Welcome to the Kyan Cafe Next.js project! This project showcases a modern and responsive coffee shop website built with Next.js, Tailwind CSS, and DynamoDB.

## Features

- **Responsive Design:** Fully responsive layout for all devices.
- **Theme Toggle:** Switch between light and dark modes.
- **Animated Components:** Smooth animations using Framer Motion.
- **Interactive Maps:** Displaying locations with Google Maps integration.
- **Secure Forms:** Contact forms with rate limiting and spam protection.
- **Social Media Integration:** Links to our social media profiles.

## Getting Started

### Prerequisites

- Node.js (v14 or later)
- Yarn or npm

### Installation

1. **Clone the repository:**

   ```bash
   git clone https://github.com/yourusername/kyancafe.git
   cd kyancafe
   ```

2. **Install dependencies:**

   ```bash
   npm install
   # or
   yarn install
   ```

3. **Set up environment variables:**

   Create a `.env.local` file in the root directory and add your environment variables:

   ```env
   NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_google_maps_api_key
   UPSTASH_REDIS_REST_URL=your_upstash_redis_url
   UPSTASH_REDIS_REST_TOKEN=your_upstash_redis_token
   ```

4. **Run the development server:**

   ```bash
   npm run dev
   # or
   yarn dev
   ```

   Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class',
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
</file>

</repository_files>
